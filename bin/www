#!/usr/bin/env node

import dotenv from "dotenv";
import app from "../app.js";
import debug from "debug";
import https from "https";
import {readFileSync} from "fs";

dotenv.config();

const log = debug("social-network-admin:server");

const sslOptions = {
    key: readFileSync(process.env.KEY_FILE),
    cert: readFileSync(process.env.CERT_FILE)
};

// get port from environment and store in Express
const port = normalizePort(process.env.PORT || '3000');
app.set("port", port);

// create HTTPs server
const server = https.createServer(sslOptions, app);

// listen on provided port, on all network interfaces
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// graceful shutdown
function gracefulShutdown() {
    log("Shutting down gracefully...");
    server.close(() => {
        log("Closed out remaining connections.");
        process.exit(0);
    });

    setTimeout(() => {
        log("Forcing shutdown...");
        log("social-network-admin:server")("forcing shutdown...");
        process.exit(1);
    }, 10000);
}

// handle termination signals
process.on("SIGTERM", gracefulShutdown);
process.on("SIGINT", gracefulShutdown);

// normalize a port into a number, string or false
function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port
    }

    return false;
}

// event listener for HTTP server "error" event
function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    const bind = typeof port === "string"
        ? "Pipe " + port
        : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges");
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
            break;
        default:
            throw error;
    }
}

// event listener for HTTP server "listening" event
function onListening() {
    const addr = server.address();
    const bind = typeof addr === "string"
        ? "pipe " + addr
        : "port " + addr.port;
    log("Listening on " + bind);
}